/**
 * docReady JavaScript
 *
 * Plain JavaScript replacement for jQuery's .ready()
 * so code can be scheduled to run when the document is ready.
 *
 * @category   Javascript loading
 * @package    syradev Lamp
 * @author     John Friend
 * @copyright  2014
 * @license    https://mit-license.org/  the MIT License (MIT)
 */
!function(t){"use strict";
// The public function name defaults to window.docReady
// but you can modify the last line of this function to pass in a different object or method name
// if you want to put them in a different namespace and those will be used instead of 
// window.docReady(...)
t=t||window;var n=[],o=!1,a=!1;
// call this when the document is ready
// this function protects itself against being called more than once
function d(){if(!o){
// this must be set to true before we start calling callbacks
o=!0;for(var t=0;t<n.length;t++)
// if a callback here happens to add new ready handlers,
// the docReady() function will see that it already fired
// and will schedule the callback to run right after
// this event loop finishes so all handlers will still execute
// in order and no new ones will be added to the readyList
// while we are processing the list
n[t].fn.call(window,n[t].ctx);
// allow any closures held by these functions to free
n=[]}}function c(){"complete"===document.readyState&&d()}
// This is the one public interface
// docReady(fn, context);
// the context argument is optional - if present, it will be passed
// as an argument to the callback
t.docReady=function(t,e){if("function"!=typeof t)throw new TypeError("callback for docReady(fn) must be a function");
// if ready has already fired, then just schedule the callback
// to fire asynchronously, but right away
o?setTimeout(function(){t(e)},1):(
// add the function and context to the list
n.push({fn:t,ctx:e}),
// if document already ready to go, schedule the ready function to run
// IE only safe when readyState is "complete", others safe when readyState is "interactive"
"complete"===document.readyState||!document.attachEvent&&"interactive"===document.readyState?setTimeout(d,1):a||(
// otherwise if we don't have event handlers installed, install them
document.addEventListener?(
// first choice is DOMContentLoaded event
document.addEventListener("DOMContentLoaded",d,!1),
// backup is window load event
window.addEventListener("load",d,!1)):(
// must be IE
document.attachEvent("onreadystatechange",c),window.attachEvent("onload",d)),a=!0))}}(window);
// modify this previous line to pass in your own method name 
// and object for the method to be attached to